"""
Crypto AI Trading Agent (with News Sentiment)
--------------------------------------------
- Pulls live crypto price data from CoinGecko
- Uses RSI, MACD, and Moving Average to decide BUY/SELL/HOLD
- Adds news sentiment from CryptoPanic API to improve accuracy
"""

import requests
import pandas as pd
import numpy as np
import time

# ---------------------------
# Fetch crypto price history
# ---------------------------
def get_price_history(coin_id="bitcoin", days=90):
    url = f"https://api.coingecko.com/api/v3/coins/{coin_id}/market_chart"
    params = {"vs_currency": "usd", "days": days, "interval": "hourly"}
    try:
        resp = requests.get(url, params=params)
        data = resp.json()
        prices = data.get("prices", [])
        df = pd.DataFrame(prices, columns=["timestamp", "price"])
        df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
        return df
    except Exception as e:
        print("Error fetching price data:", e)
        return pd.DataFrame()

# ---------------------------
# Technical Indicators
# ---------------------------
def calc_rsi(series, period=14):
    delta = series.diff()
    up = delta.clip(lower=0)
    down = -1 * delta.clip(upper=0)
    avg_gain = up.rolling(period).mean()
    avg_loss = down.rolling(period).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

def calc_macd(series, fast=12, slow=26, signal=9):
    exp1 = series.ewm(span=fast, adjust=False).mean()
    exp2 = series.ewm(span=slow, adjust=False).mean()
    macd_line = exp1 - exp2
    signal_line = macd_line.ewm(span=signal, adjust=False).mean()
    return macd_line, signal_line

def moving_average(series, window=20):
    return series.rolling(window=window).mean()

# ---------------------------
# News Sentiment (CryptoPanic API - free version)
# ---------------------------
def get_news_sentiment(coin="bitcoin"):
    """
    Fetch recent crypto news and estimate sentiment.
    NOTE: This is a simple heuristic sentiment detector, not GPT-based.
    """
    url = "https://cryptopanic.com/api/v1/posts/"
    params = {"auth_token": "demo", "currencies": coin, "kind": "news"}
    
    try:
        resp = requests.get(url, params=params)
        data = resp.json()
        posts = data.get("results", [])
        score = 0
        for p in posts[:10]:  # just check last 10 news items
            title = p.get("title", "").lower()
            if any(word in title for word in ["surge", "bull", "buy", "rally", "gain"]):
                score += 1
            elif any(word in title for word in ["crash", "bear", "sell", "down", "loss"]):
                score -= 1
        if score > 2:
            return "bullish"
        elif score < -2:
            return "bearish"
        else:
            return "neutral"
    except Exception as e:
        print("Error fetching news:", e)
        return "neutral"

# ---------------------------
# Decision Engine
# ---------------------------
def generate_signal(df, sentiment="neutral"):
    if df.empty:
        return "No Data"

    close = df["price"]
    df["rsi"] = calc_rsi(close)
    df["ma20"] = moving_average(close, 20)
    df["macd"], df["macd_signal"] = calc_macd(close)

    latest = df.iloc[-1]
    votes = {"BUY": 0, "SELL": 0, "HOLD": 0}

    # RSI rule
    if latest["rsi"] < 30:
        votes["BUY"] += 1
    elif latest["rsi"] > 70:
        votes["SELL"] += 1
    else:
        votes["HOLD"] += 1

    # MACD rule
    if latest["macd"] > latest["macd_signal"]:
        votes["BUY"] += 1
    else:
        votes["SELL"] += 1

    # Moving average rule
    if latest["price"] > latest["ma20"]:
        votes["BUY"] += 1
    else:
        votes["SELL"] += 1

    # Combine votes
    decision = max(votes, key=votes.get)

    # Adjust decision with news sentiment
    if sentiment == "bullish" and decision != "BUY":
        decision = "BUY"
    elif sentiment == "bearish" and decision == "BUY":
        decision = "HOLD"

    return decision, votes

# ---------------------------
# Demo Run
# ---------------------------
if __name__ == "__main__":
    coin = input("Enter crypto name (e.g., bitcoin, ethereum, dogecoin): ").strip().lower()

    print(f"\nFetching {coin} price data...")
    df = get_price_history(coin, days=60)

    print(f"Fetching {coin} news sentiment...")
    sentiment = get_news_sentiment(coin)

    if df.empty:
        print("Could not fetch data. Please check coin name or API.")
    else:
        signal, details = generate_signal(df, sentiment)
        print("\n===== Trading Signal =====")
        print(f"Coin: {coin}")
        print(f"Decision: {signal}")
        print(f"Votes breakdown: {details}")
        print(f"News sentiment adjustment: {sentiment}")
        print("==========================\n")